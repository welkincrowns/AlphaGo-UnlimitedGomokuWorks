GUI 简述

本工程的用户接口，采用了一个开放源代码的围棋图形化演示程序（ https://github.com/Mezoka/Board ）的修改版本，用于进行五子棋界面的展示、和用户的互动与跨应用程序的通信。该工程使用 Qt 进行编写和设计。为了兼容五子棋的规则和特征，我们修改了该程序以适应五子棋的特征，并基于通用围棋文本传输协议（Go Text Protocal）设计了一个类似的传输协议来对五子棋的棋局数据进行传输。

GUI 的构建和使用

使用该 GUI 程序来进行五子棋演示的的使用方式形如 board -gomoku (-black <command> <args>) (-white <command> <args>) 的形式，其中 -gomoku 指定该GUI程序演示五子棋的内容并适用五子棋规则， -black 设定执黑子的程序， -white 设定执白子的程序。若不加以设定，则由人类玩家通过鼠标进行操作。

在没有设定程序的模式下，该 GUI 程序只显示一个棋盘，可以用鼠标进行操作。在设定了对弈程序后，该 GUI 程序将会在界面的左侧展现棋盘画面，右侧展现与对弈程序之间进行的交互有关的信息。在左侧的棋盘画面中，以白色和黑色两色的圈分别代表不同颜色的棋子，以红色的叉形表示黑棋禁止落子的区域。如图 1.png 所示。当鼠标指针移动到棋盘中时，棋盘中的的相应点位将会显示成红色，点击即可在此处落子，如图 2.png 所示。双方轮流进行落子，以第一个达到五个子相连者为胜。

GUI 与对弈程序的通信

该 GUI 程序与对弈程序使用一个基于通用围棋文本传输协议（Go Text Protocal）的一个修改版本的协议进行通信，GUI 程序将会自动调用对弈程序的标准输入输出流来传输与获取数据。该通信协议的主要指令包括以下一些：

* play <color> <position> 当前局面下将会在<position>位置下落下<color>颜色的落子。
* genmove <color> 以当前局面为背景，生成一步 <color> 颜色的落子。返回落子的位置。
* bannedpoint 返回包含所有禁止落子的位置的向量。
* showboard 返回当前的棋局状态。
* quit 退出程序。

GUI 程序的主要架构

GUI 程序逻辑控制的主要类为Board类和、Player类。

Board 类为棋盘上棋子的信息，禁手的信息等与棋盘有关的信息提供了存储、访问的通用接口。

Player 类继承自QObject，为描述棋局玩家的抽象类，使用中介者设计模式进行架构，为程序主体与玩家、与其他对弈程序之间的互动提供了通用的接口。 Player 类包含以下几个重要的成员函数：
	PlayMove 成员函数为落子操作提供了通用的接口，通过该函数对落子状态实施通知。
	Send 成员函数包装了向该玩家/对弈程序客户端发送指令的过程，通过一个队列来对指令进行存储和发送。
	GetRespond 成员函数包装了从该玩家/对弈程序客户端中提取指令的回应的过程，自动提取对指令队列头的指令的回复信息，验证其有效性并对其进行整理。
	readStandardOutput 槽包装了从对弈程序客户端的标准输出中提取信息并进行互动的过程。这个函数包装了对不同类型的指令以及相关的回应进行的处理的过程，并包含了游戏过程的主要逻辑。
	readStandardError 槽包装了从对弈程序客户端的错误输出中提取信息的过程，用于调试与错误信息的显示。

此外，控制GUI程序显示的主要类为BoardView和Window类。其中，BoardView为棋盘显示的主要类，负责棋盘的绘制、棋盘信息的显示。Window类为控制主窗口的类，调节主窗口中棋盘显示区域和文字显示区域的关系。